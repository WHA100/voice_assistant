#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pyttsx3
import time

def test_tts():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ TTS"""
    try:
        print("üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TTS —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        print("=" * 50)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS
        engine = pyttsx3.init()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤
        voices = engine.getProperty('voices')
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {len(voices)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        for i, voice in enumerate(voices):
            print(f"  {i+1}. {voice.name} ({voice.id})")
        
        # –ò—â–µ–º –ª—É—á—à–∏–π —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
        best_voice = None
        for voice in voices:
            voice_name = voice.name.lower()
            voice_id = voice.id.lower()
            
            if 'russian' in voice_name or 'ru' in voice_id or '—Ä—É—Å—Å–∫–∏–π' in voice_name:
                best_voice = voice.id
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å: {voice.name}")
                break
            elif 'english' in voice_name or 'en' in voice_id:
                if not best_voice:
                    best_voice = voice.id
                    print(f"üî§ –ù–∞–π–¥–µ–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≥–æ–ª–æ—Å: {voice.name}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–ª–æ—Å
        if best_voice:
            engine.setProperty('voice', best_voice)
            print(f"üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ–ª–æ—Å: {best_voice}")
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        engine.setProperty('rate', 140)      # –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏
        engine.setProperty('volume', 0.9)    # –ì—Ä–æ–º–∫–æ—Å—Ç—å
        
        print(f"‚öôÔ∏è  –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏: {engine.getProperty('rate')}")
        print(f"üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å: {engine.getProperty('volume')}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
        test_phrases = [
            "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º —Ä–µ—á–∏.",
            "–¢–µ–ø–µ—Ä—å —è –≥–æ–≤–æ—Ä—é –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.",
            "–ú–æ–π –≥–æ–ª–æ—Å —Å—Ç–∞–ª –±–æ–ª–µ–µ –ø—Ä–∏—è—Ç–Ω—ã–º –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞!"
        ]
        
        print("\nüéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—á–∏:")
        for i, phrase in enumerate(test_phrases, 1):
            print(f"\n{i}. –ü—Ä–æ–∏–∑–Ω–æ—à—É: {phrase}")
            engine.say(phrase)
            engine.runAndWait()
            time.sleep(0.5)
        
        print("\n‚úÖ –¢–µ—Å—Ç TTS –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ TTS: {e}")
        return False

if __name__ == "__main__":
    test_tts() 