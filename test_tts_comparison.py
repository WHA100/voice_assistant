#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import tempfile
import os
import time
from gtts import gTTS
import edge_tts
import pyttsx3
import pygame

class TTSComparison:
    def __init__(self):
        self.test_text = "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ—Å—Ç–∏—Ä—É—é —Ä–∞–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏."
        pygame.mixer.init()
    
    def test_pyttsx3(self):
        """–¢–µ—Å—Ç pyttsx3 (–ª–æ–∫–∞–ª—å–Ω—ã–π TTS)"""
        print("üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ pyttsx3...")
        try:
            engine = pyttsx3.init()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞
            voices = engine.getProperty('voices')
            for voice in voices:
                if 'russian' in voice.name.lower() or 'ru' in voice.id.lower():
                    engine.setProperty('voice', voice.id)
                    break
            
            engine.setProperty('rate', 140)
            engine.setProperty('volume', 0.9)
            
            start_time = time.time()
            engine.say(self.test_text)
            engine.runAndWait()
            duration = time.time() - start_time
            
            print(f"‚úÖ pyttsx3: {duration:.2f} —Å–µ–∫")
            return True
        except Exception as e:
            print(f"‚ùå pyttsx3 –æ—à–∏–±–∫–∞: {e}")
            return False
    
    def test_gtts(self):
        """–¢–µ—Å—Ç gTTS (Google TTS)"""
        print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ gTTS (Google)...")
        try:
            start_time = time.time()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_filename = tempfile.mktemp(suffix='.mp3')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—á—å
            tts = gTTS(text=self.test_text, lang='ru', slow=False)
            tts.save(temp_filename)
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            pygame.mixer.music.load(temp_filename)
            pygame.mixer.music.play()
            
            # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            while pygame.mixer.music.get_busy():
                pygame.time.wait(100)
            
            duration = time.time() - start_time
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(temp_filename)
            except:
                pass
            
            print(f"‚úÖ gTTS: {duration:.2f} —Å–µ–∫")
            return True
        except Exception as e:
            print(f"‚ùå gTTS –æ—à–∏–±–∫–∞: {e}")
            return False
    
    async def test_edge_tts(self):
        """–¢–µ—Å—Ç edge-tts (Microsoft Edge TTS)"""
        print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ edge-tts (Microsoft)...")
        try:
            start_time = time.time()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_filename = tempfile.mktemp(suffix='.mp3')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—á—å
            communicate = edge_tts.Communicate(self.test_text, "ru-RU-SvetlanaNeural")
            await communicate.save(temp_filename)
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            pygame.mixer.music.load(temp_filename)
            pygame.mixer.music.play()
            
            # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            while pygame.mixer.music.get_busy():
                pygame.time.wait(100)
            
            duration = time.time() - start_time
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(temp_filename)
            except:
                pass
            
            print(f"‚úÖ edge-tts: {duration:.2f} —Å–µ–∫")
            return True
        except Exception as e:
            print(f"‚ùå edge-tts –æ—à–∏–±–∫–∞: {e}")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ TTS –±–∏–±–ª–∏–æ—Ç–µ–∫")
        print("=" * 50)
        print(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {self.test_text}")
        print()
        
        # –¢–µ—Å—Ç pyttsx3
        self.test_pyttsx3()
        await asyncio.sleep(1)
        
        # –¢–µ—Å—Ç gTTS
        self.test_gtts()
        await asyncio.sleep(1)
        
        # –¢–µ—Å—Ç edge-tts
        await self.test_edge_tts()
        
        print("\n" + "=" * 50)
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print("‚Ä¢ pyttsx3: –õ–æ–∫–∞–ª—å–Ω—ã–π, –±—ã—Å—Ç—Ä—ã–π, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ —Å—Ä–µ–¥–Ω–µ–µ")
        print("‚Ä¢ gTTS: –û–Ω–ª–∞–π–Ω, —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç")
        print("‚Ä¢ edge-tts: –û–Ω–ª–∞–π–Ω, –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç")

if __name__ == "__main__":
    comparison = TTSComparison()
    asyncio.run(comparison.run_all_tests()) 